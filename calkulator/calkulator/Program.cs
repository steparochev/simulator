using System; 

class C
{
    static void Main() // Объявляет статический метод Main, который является точкой входа в программу.  "static" означает, что метод принадлежит классу, а не экземпляру класса.  "void" означает, что метод ничего не возвращает.
    {
        try // Начинает блок try-catch, который позволяет перехватывать исключения (ошибки), возникающие во время выполнения кода.
        {
            Console.WriteLine(Calc(Console.ReadLine()!.Replace(" ", ""))); // Считывает строку из консоли, удаляет пробелы и передает строку в метод Calc, выводя результат в консоль.
  
        }
        catch (Exception e) // "e" - это переменная, содержащая информацию об исключении.
        {
            Console.WriteLine("Ошибка: " + e.Message);
        }
    }

    static double Calc(string s) // Объявляет статический метод Calc, который принимает строку (математическое выражение) и возвращает double (результат вычисления).
    {
        
        int p = s.IndexOf('+'), m = s.IndexOf('-'), mul = s.IndexOf('*'), d = s.IndexOf('/'); 
        // s.IndexOf('+'):  Возвращает индекс первого вхождения символа '+' в строку s. Если символ не найден, возвращает -1.  Аналогично для других операторов.
        if (p > 0) return Parse(s.Substring(0, p)) + Parse(s.Substring(p + 1)); // Если найден оператор +, вычисляет сумму двух чисел, разделенных этим оператором.
        // s.Substring(0, p):  Возвращает подстроку строки s от начала (индекс 0) до индекса p (не включая p).  Это первая часть выражения.
        // s.Substring(p + 1):  Возвращает подстроку строки s от индекса p + 1 до конца строки. Это вторая часть выражения.
       
     
   
        if (m > 0) return Parse(s.Substring(0, m)) - Parse(s.Substring(m + 1)); 
        if (mul > 0) return Parse(s.Substring(0, mul)) * Parse(s.Substring(mul + 1)); 
        if (d > 0)
        { 
            double divisor = Parse(s.Substring(d + 1)); 
            if (divisor == 0) throw new DivideByZeroException("Деление на ноль!"); // Проверяет, не равен ли делитель нулю. Если равен, выбрасывает исключение.
            return Parse(s.Substring(0, d)) / divisor; // Вычисляет частное и возвращает результат.
        }
        return Parse(s); // Если ни один из операторов не найден, предполагает, что строка содержит только одно число, и преобразует его в double.
    }

    static double Parse(string s) // Объявляет статический метод Parse, который принимает строку и пытается преобразовать ее в double.
    {
        return double.TryParse(s, out double r) ? r : throw new ArgumentException("Некорректный формат: " + s); // Пытается преобразовать строку в double и возвращает результат, либо выбрасывает исключение, если преобразование не удалось.
        // double.TryParse(s, out double r):  Пытается преобразовать строку s в double и сохранить результат в переменной r (если преобразование успешно).  Возвращает true, если преобразование успешно, и false в противном случае.
        // out double r:  "out" означает, что метод Parse должен присвоить значение переменной r.
        // ?: - тернарный оператор:  Если double.TryParse вернул true, возвращает r.  В противном случае выбрасывает исключение ArgumentException.
        // throw new ArgumentException(...):  Создает новый объект исключения ArgumentException, указывая, что аргумент (в данном случае, строка s) имеет некорректный формат.
    }
}